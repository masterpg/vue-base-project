Index: test/stores/product-store/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/stores/product-store/index.ts	(date 1544029333000)
+++ test/stores/product-store/index.ts	(date 1544029402000)
@@ -2,11 +2,7 @@
 import { Product as APIProduct } from '../../../src/apis';
 import { Product } from '../../../src/stores';
 import { TestStore } from '../../types';
-import {
-  newProductStore,
-  ProductState,
-  ProductStoreImpl,
-} from '../../../src/stores/product-store';
+import { newProductStore, ProductState, ProductStoreImpl } from '../../../src/stores/product-store';
 
 const assert = chai.assert;
 
@@ -58,14 +54,46 @@
   });
 
   test('getAllProducts()', async () => {
-    const NEW_API_PRODUCTS = [
-      { id: '1', title: 'product1', price: 101, inventory: 1 },
-      { id: '2', title: 'product2', price: 102, inventory: 2 },
-    ];
+    const NEW_API_PRODUCTS = [{ id: '1', title: 'product1', price: 101, inventory: 1 }, { id: '2', title: 'product2', price: 102, inventory: 2 }];
     td.replace(shopAPI, 'getProducts');
     td.when(shopAPI.getProducts()).thenResolve(NEW_API_PRODUCTS);
 
     await productStore.getAllProducts();
     assert.deepEqual(productStore.allProducts, NEW_API_PRODUCTS);
   });
+
+  test('updateProduct() - 一般ケース', async () => {
+    // 対象の商品に更新データを設定
+    const PRODUCT_ID = '1';
+    const product = productStore.getProductById(PRODUCT_ID);
+    if (!product) throw new Error(`Product \`${PRODUCT_ID}\` was not found.`);
+    product.title = 'aaa';
+    product.price = 111;
+    product.inventory = 222;
+
+    // モック処理の設定
+    const stateProduct = {} as Product;
+    td.replace(productStore, 'm_getStateProductById');
+    td.when(productStore.m_getStateProductById(PRODUCT_ID)).thenReturn(stateProduct);
+    td.replace(shopAPI, 'updateProduct');
+
+    // 商品の更新を実行
+    await productStore.updateProduct(product);
+
+    // Stateの商品と引数の商品の内容が一致することを検証
+    // (Stateの商品に引数の商品の内容が反映されるため)
+    assert.deepEqual(stateProduct, product);
+    // `ShopAPI#updateProduct()`が呼び出されたことを検証
+    td.verify(shopAPI.updateProduct(product));
+  });
+
+  test('updateProduct() - 存在しない商品を指定した場合', async () => {
+    // 対象の商品に更新データを設定
+    const product = productStore.getProductById('1') as Product;
+    product.id = '9876';
+    // 商品の更新を実行
+    await productStore.updateProduct(product);
+    // 何も問題は起きない
+    assert(true);
+  });
 });
